#### What youâ€™ll need (Prerequisite)
```
- 2 CPUs or more
- 2 GB of free memory
- 20 GB of free disk space
- Internet connection

NOTE : "t3.small" perfect suit for this lab
## ðŸ”¹STEP-1
#### Change hostname
$ whoami
$ sudo hostnamectl set-hostname terraform
$ bash
$ hostname
## ðŸ”¹STEP-2
#### Update Ubuntu packages install required package for this lab
$ sudo apt-get update -y
$ sudo apt-get install apt-transport-https curl conntrack
## ðŸ”¹STEP-3
#### Install Docker
$ curl -fsSL https://get.docker.com -o get-docker.sh
$ sudo sh get-docker.sh
$ ls -l /var/run/docker.sock
$ id
$ sudo usermod -aG docker $USER && newgrp docker
$ id
$ docker --version
## ðŸ”¹STEP-4
#### Install Kubectl
$ curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl &&   chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl
$ sudo chmod +x /usr/local/bin/kubectl
$ ls -l /usr/local/bin/kubectl
$ kubectl version --short
## ðŸ”¹STEP-5
#### Install Minikube
$ curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
$ ls -l 
$ sudo install minikube-linux-amd64 /usr/local/bin/minikube
$ minikube version
## ðŸ”¹STEP-6
#### Start Minikube
$ kubectl cluster-info
$ minikube start
$ kubectl cluster-info
$ minikube start --vm-driver=docker --force
## ðŸ”¹STEP-7
#### Check Minikube status
$ minikube status
$ kubectl get nodes
## ðŸ”¹STEP-8
#### Check Minikube all component status
$ kubectl get po -A
## ðŸ”¹STEP-9
#### Create Nginx pod to validate our 1 node minikube cluster
$ vim pod.yml
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx
    ports:
    - containerPort: 80
## ðŸ”¹STEP-10
#### Run & check Nginx Pod status
$ kubectl apply -f pod.yml
$ kubectl get po
## ðŸ”¹STEP-11
#### Delete minikube cluster

#####deployment code and nodepods menthod commands
$ vi lohi.yml

kind: Deployment
apiVersion: apps/v1
metadata:
   name: mydeployments
spec:
   replicas: 1
   selector:      # tells the controller which pods to watch/belong to
    matchLabels:
     name: deployment
   template:
     metadata:
       name: testpod1
       labels:
         name: deployment
     spec:
      containers:
        - name: c00
          image: httpd
          ports:
          - containerPort: 80
$ kubectl apply -f <filename.yaml>
$ kubectl get deployment
$ kubectl get pods
$ kubectl get services
$ kubectl expose deployment mydeployments --type=NodePort --port=80 
 //    "                "            "      --type=ClusterIP .(cluster ip command ) //
$ kubectl get services
$ minikube service mydeployment --url
$ curl ............ 

##### 2nd method how to creare a pode
$ kubectl run <pode name> --image=<image name>
$ kubectl get pods
$ kubectl describe pod <podename>
